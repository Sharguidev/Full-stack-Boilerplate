# docker-compose.yml (Root level - Full stack development)
version: "3.8"

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: fullstack_db
    environment:
      POSTGRES_DB: example
      POSTGRES_USER: gitpod
      POSTGRES_PASSWORD: postgres
    ports:
      - "5431:5431"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - fullstack_network
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${DB_USER:-postgres} -d ${DB_NAME:-fullstack_db}",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Backend (Flask API - using your existing devcontainer Dockerfile)
  backend:
    build:
      context: .
      dockerfile: .devcontainer/Dockerfile
    container_name: fullstack_backend
    ports:
      - "3001:3001"
    volumes:
      # Mount the entire workspace (matching your devcontainer setup)
      - .:/workspaces/${WORKSPACE_FOLDER:-fullstack-boilerplate}
      - /workspaces/${WORKSPACE_FOLDER:-fullstack-boilerplate}/.venv # Exclude venv from sync
    working_dir: /workspaces/${WORKSPACE_FOLDER:-fullstack-boilerplate}
    depends_on:
      db:
        condition: service_healthy
    networks:
      - fullstack_network
    restart: unless-stopped
    command: >
      bash -c "
        echo 'ðŸš€ Starting Flask backend...' &&
        echo 'Waiting for database to be ready...' &&
        while ! pg_isready -h db -p 5432 -U ${DB_USER:-postgres}; do
          echo 'Database not ready yet, waiting...'
          sleep 2
        done &&
        echo 'âœ… Database is ready!' &&
        echo 'ðŸ“¦ Installing/updating Python dependencies...' &&
        pipenv install --dev &&
        echo 'ðŸ”„ Running database migrations...' &&
        pipenv run flask db upgrade 2>/dev/null || echo 'No migrations to run yet' &&
        echo 'ðŸŒŸ Starting Flask development server...' &&
        pipenv run flask run --host=0.0.0.0 --port=5000 --debug
      "

  # Frontend (Astro + React + Tailwind CSS)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: fullstack_frontend
    ports:
      - "4321:4321"
    volumes:
      - ./frontend:/app
      - /app/node_modules # Prevent node_modules from being overwritten
      - /app/dist # Prevent dist from being overwritten
      - /app/.astro # Prevent Astro cache from being overwritten
    depends_on:
      - backend
    networks:
      - fullstack_network
    restart: unless-stopped
    command: >
      sh -c "
        echo 'ðŸš€ Starting Astro frontend...' &&
        echo 'ðŸ“¦ Installing/updating dependencies...' &&
        pnpm install &&
        echo 'ðŸŒŸ Starting Astro development server...' &&
        pnpm run dev --host 0.0.0.0 --port 4321
      "

  # Redis (Optional - for caching, sessions, etc.)
  redis:
    image: redis:7-alpine
    container_name: fullstack_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - fullstack_network
    restart: unless-stopped
    command: redis-server --appendonly yes

  # Mailhog (Optional - for email testing in development)
  mailhog:
    image: mailhog/mailhog:latest
    container_name: fullstack_mailhog
    ports:
      - "1025:1025" # SMTP server
      - "8025:8025" # Web interface
    networks:
      - fullstack_network
    restart: unless-stopped

# Volumes for persistent data
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

# Networks
networks:
  fullstack_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16
